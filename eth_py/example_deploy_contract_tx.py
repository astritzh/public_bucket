import json
from web3 import Web3, HTTPProvider
from web3.middleware import geth_poa_middleware

with open('key_info.json') as key_info_file:
  key_info = json.load(key_info_file)

web3 = Web3(Web3.HTTPProvider(key_info['client']))
web3.middleware_onion.inject(geth_poa_middleware, layer=0)

if not web3.isConnected():
  print('Failed to connect to ETH client!')
  exit(1)

with open(key_info['path']) as keyfile:
    encrypted_key = keyfile.read()
    private_key = web3.eth.account.decrypt(encrypted_key, key_info['pw'])

account = web3.eth.account.from_key(private_key)

nonce = web3.eth.get_transaction_count(account.address)

signed_tx = account.sign_transaction({
  'from': account.address,
  'nonce': nonce,
  'gas': 1000000,
  'maxFeePerGas': web3.toWei(100, 'gwei'),
  'maxPriorityFeePerGas': web3.toWei(1, 'gwei'),
  'chainId': web3.eth.chain_id,
  'data': '608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506104a5806100606000396000f3fe6080604052600436106100225760003560e01c80633ef133671461009557610090565b366100905760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561008d573d6000803e3d6000fd5b50005b600080fd5b6100af60048036038101906100aa91906102b9565b6100b1565b005b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461010957600080fd5b6000819050600030905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161014e91906102f5565b602060405180830381865afa15801561016b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018f9190610346565b905060008114156101a257505050610253565b60008373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016101ff9291906103e1565b6020604051808303816000875af115801561021e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102429190610442565b90508061024e57600080fd5b505050505b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102868261025b565b9050919050565b6102968161027b565b81146102a157600080fd5b50565b6000813590506102b38161028d565b92915050565b6000602082840312156102cf576102ce610256565b5b60006102dd848285016102a4565b91505092915050565b6102ef8161027b565b82525050565b600060208201905061030a60008301846102e6565b92915050565b6000819050919050565b61032381610310565b811461032e57600080fd5b50565b6000815190506103408161031a565b92915050565b60006020828403121561035c5761035b610256565b5b600061036a84828501610331565b91505092915050565b6000819050919050565b600061039861039361038e8461025b565b610373565b61025b565b9050919050565b60006103aa8261037d565b9050919050565b60006103bc8261039f565b9050919050565b6103cc816103b1565b82525050565b6103db81610310565b82525050565b60006040820190506103f660008301856103c3565b61040360208301846103d2565b9392505050565b60008115159050919050565b61041f8161040a565b811461042a57600080fd5b50565b60008151905061043c81610416565b92915050565b60006020828403121561045857610457610256565b5b60006104668482850161042d565b9150509291505056fea264697066735822122022ce3d9d4945c3df323321d0b797aab10f6e51ae57323f20bd34b3d2be87abed64736f6c634300080a0033',
})

tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)

print("Broadcast tx:", tx_hash.hex())


